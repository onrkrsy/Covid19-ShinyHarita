setwd("D:/RProjects/others/final/TheFinalProject")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
capFirst <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
runApp()
View(capFirst)
View(capFirst)
downloadGithubData <- function() {
download.file(
url      = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip",
destfile = "data/covid19_data.zip"
)
data_path <- "COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_"
unzip(
zipfile   = "data/covid19_data.zip",
files     = paste0(data_path, c("confirmed_global.csv", "deaths_global.csv", "recovered_global.csv", "confirmed_US.csv", "deaths_US.csv")),
exdir     = "data",
junkpaths = T
)
}
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
body_plots <- dashboardBody(
fluidRow(   column(HTML("Denemes"), width=3), uiOutput("selectize_casesByCountries"), width=6),
fluidRow(
fluidRow(
fluidRow(
box(
title = "Vaka sayısı zamana bağlı değişimi",
plotlyOutput("case_evolution"),
column(
checkboxInput("checkbox_logCaseEvolution", label = "Logarithmic Y-Axis", value = FALSE),
width = 3,
style = "float: right; padding: 10px; margin-right: 50px"
),
width = 6
),
box(
title = "New cases",
plotlyOutput("case_evolution_new"),
column(
uiOutput("selectize_casesByCountries_new"),
width = 3,
),
column(
HTML("Note: Aktif cases are calculated as <i>Confirmed - (Estimated Recoveries + Deceased)</i>. Therefore, <i>new</i> active cases can
be negative for some days, if on this day there were more new estimated recoveries + deceased cases than there were new
confirmed cases."),
width = 7
),
width = 6
)
),
fluidRow(
box(
title = "Cases per Country",
plotlyOutput("case_evolution_byCountry"),
fluidRow(
column(
uiOutput("selectize_casesByCountries"),
width = 3,
),
column(
checkboxInput("checkbox_logCaseEvolutionCountry", label = "Logarithmic Y-Axis", value = FALSE),
checkboxInput("checkbox_per100kEvolutionCountry", label = "Per Population", value = FALSE),
width = 3,
style = "float: right; padding: 10px; margin-right: 50px"
)
),
width = 6
),
box(
title = "Evolution of Cases since 10th/100th case",
plotlyOutput("case_evolution_after100"),
fluidRow(
column(
uiOutput("selectize_casesByCountriesAfter100th"),
width = 3,
),
column(
uiOutput("selectize_casesSince100th"),
width = 3
),
column(
checkboxInput("checkbox_logCaseEvolution100th", label = "Logarithmic Y-Axis", value = FALSE),
checkboxInput("checkbox_per100kEvolutionCountry100th", label = "Per Population", value = FALSE),
width = 3,
style = "float: right; padding: 10px; margin-right: 50px"
)
),
width = 6
)
),
fluidRow(
box(
title = "Evolution of Doubling Times per Country",
plotlyOutput("plot_doublingTime"),
fluidRow(
column(
uiOutput("selectize_doublingTime_Country"),
width = 3,
),
column(
uiOutput("selectize_doublingTime_Variable"),
width = 3,
),
column(width = 3),
column(
div("Note: The doubling time is calculated based on the growth rate over the last seven days.",
style = "padding-top: 15px;"),
width = 3
)
)
)
)
)
)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(capFirst)
View(data_atDate)
View(data_evolution)
View(data_evolution)
View(data_evolution)
View(data_evolution)
View(data_evolution)
View(data_evolution)
output$case_evolution <- renderPlotly({
data <- data_evolution %>%
mutate(var = sapply(var, capFirst)) %>%
filter(if (input$selectedCountry == "All") TRUE else `Country/Region` %in% input$selectedCountry) %>%
group_by(date, var,`Country/Region`) %>%
summarise(
"value" = sum(value, na.rm = T)
) %>%
as.data.frame()
dataRendered <- data;
if (input$selectedCountry == "All") {
data <- data %>%
group_by(date, var) %>%
summarise(
"value" = sum(value, na.rm = T)
)
}
p <- plot_ly(
data,
x     = ~date,
y     = ~value,
name  = sapply(data$var, capFirst),
color = ~var,
type  = 'scatter',
mode  = 'lines') %>%
layout(
yaxis = list(title = "# Cases--"),
xaxis = list(title = "Date")
)%>%
config(locale = "tr")
if (input$checkbox_logCaseEvolution) {
p <- layout(p, yaxis = list(type = "log"))
}
return(p)
})
shiny::runApp()
p <- plot_ly(
data,
x     = ~date,
y     = ~value,
name  =  ifelse(data$var == "confirmed","Toplam",ifelse(data$var == "deceased","Ölüm",ifelse(data$var == "recovered","İyileşti",ifelse(data$var == "active","Aktif","")))),
color =  ifelse(data$var == "confirmed","yellow",ifelse(data$var == "deceased","red",ifelse(data$var == "recovered","green",ifelse(data$var == "active","blue","")))),
type  = 'scatter',
mode  = 'lines') %>%
layout(
yaxis = list(title = "# Vakalar"),
xaxis = list(title = "Tarih")
)%>%
config(locale = "tr")
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(data_latest)
View(data_latest)
View(data_evolution)
View(data_evolution)
data <- data_latest %>% filter(var!="active")
data2 <- data_latest
View(data2)
View(data2)
data2 <- data_latest  mutate(var = sapply(var, capFirst)) %>%
data2 <- data_latest %>% group_by(date, `Country/Region`) %>%
s
data2 <- data_latest %>% group_by(date, `Country/Region`)
View(data2)
View(data2)
View(data2)
View(data2)
data3 <- data_evolution %>%group_by(date, var, `Country/Region`) %>%
summarise(
"value" = sum(value, na.rm = T)
)
View(data3)
View(data3)
data2 <- data_latest %>% group_by(date, `Country/Region`)%>% summarise(
"recovered" = sum(recovered, na.rm = T)
)
View(data2)
View(data2)
data2 <- data_latest %>% group_by(date, `Country/Region`)%>% summarise(
"recovered" = sum(recovered, na.rm = T),
)
data2 <- data_latest %>% group_by(date, `Country/Region`)%>% summarise(
"recovered" = sum(recovered, na.rm = T), "confirmed" = sum(confirmed, na.rm = T)
)
View(data2)
View(data2)
data2 <- data_latest %>% group_by(date, `Country/Region`)%>% summarise(
"recovered" = sum(recovered, na.rm = T), "confirmed" = sum(confirmed, na.rm = T),"deceased" = sum(deceased, na.rm = T)
)
View(data2)
View(data2)
runApp()
data2 <- data_latest %>%
filter(if (input$selectedCountry == "All") TRUE else `Country/Region` %in% input$selectedCountry ) %>%
group_by(date, `Country/Region`)%>% summarise("recovered" = sum(recovered, na.rm = T), "confirmed" = sum(confirmed, na.rm = T),"deceased" = sum(deceased, na.rm = T))
data2 <- data_latest %>%
filter(`Country/Region` %in% 'Turkey' ) %>%
group_by(date, `Country/Region`)%>% summarise("recovered" = sum(recovered, na.rm = T), "confirmed" = sum(confirmed, na.rm = T),"deceased" = sum(deceased, na.rm = T))
data2 <- data_latest %>%
filter(`Country/Region` %in% 'Turkey') %>%
group_by(date, `Country/Region`)%>% summarise("recovered" = sum(recovered, na.rm = T), "confirmed" = sum(confirmed, na.rm = T),"deceased" = sum(deceased, na.rm = T))
View(data2)
View(data2)
View(data_evolution)
data2 <- data_evolution %>%
filter(var!="active") %>%
mutate(var = sapply(var, capFirst)) %>%
filter(if (input$selectedCountry == "All") TRUE else `Country/Region` %in% input$selectedCountry ) %>%
group_by(date, var, `Country/Region`) %>%
summarise(new_cases = sum(value_new, na.rm = T))
View(data2)
View(data2)
View(data2)
data <- data_evolution %>%
filter(var!="active") %>%
mutate(var = sapply(var, capFirst)) %>%
filter(`Country/Region` %in% 'input$selectedCountry 'Turkey' ) %>%
group_by(date, var, `Country/Region`) %>%
summarise(new_cases = sum(value_new, na.rm = T))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summarise(new_cases = sum(value_new, na.rm = T))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
